<audio id="backgroundAudio" controls autoplay loop style="display: none">
  <source type="audio/mpeg" />
  Your browser does not support the audio element.
</audio>
<link rel="stylesheet" href="/css/styles.css" type="text/css" />
<main class="background-image" id="backgroundImage"></main>
<section>
  <div class="container">
    <div class="card" id="card">
      <div class="glare" id="glare"></div>
      <h2 id="cardTitle"></h2>
      <p id="cardDesc"></p>
    </div>
    <div class="image-list" id="image-list"></div>
  </div>
  <div class="chat-window">
    <div>
      <textarea id="responseWindow" class="messages" rows="4" cols="50" disabled></textarea>
    </div>
    <div>
      <label class="label">
        <input id="chatInput" placeholder="Type your message here..." />
        <button class="button" id="sendBtn">
          <div class="button-send"></div>
          <span>
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              class="send-icon"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M2 21L23 12L2 3V10L17 12L2 14V21Z" fill="currentColor" />
            </svg>
          </span>
        </button>
      </label>
      <label class="voice-switch">
        <div class="toggle">
          <input id="speakToggle" class="toggle-state" type="checkbox" name="check" value="check" />
          <div class="indicator"></div>
        </div>
        Hear your character speak
      </label>
    </div>
  </div>
</section>

<script type="module">
    import characters from '/characters.json' with { type: "json" };
    const card = document.getElementById("card");
    const glare = document.getElementById('glare');
    const backgroundAudio = document.getElementById("backgroundAudio");
    const backgroundImage = document.getElementById("backgroundImage");
    const cardTitle = document.getElementById("cardTitle");
    const cardDesc = document.getElementById("cardDesc");
    const imageList = document.getElementById("image-list");
    const speakToggle = document.getElementById("speakToggle");
    const sendBtn = document.getElementById("sendBtn");
    const chatWindow = document.getElementById("chatInput");
    let currentCharacter = characters[0];

    card.addEventListener("mousemove", (e) => {
      const { clientX, clientY } = e;
      const { left, top, width, height } = card.getBoundingClientRect();
      const x = (clientX - left) / width * 100;
      const y = (clientY - top) / height * 100;
      glare.style.setProperty('--glare-x', `${x}%`);
      glare.style.setProperty('--glare-y', `${y}%`);
      const rotateX = (clientY - top - height / 2) / 25;
      const rotateY = (clientX - left - width / 2) / 25;
      card.style.transform = `rotateY(${rotateY}deg) rotateX(${-rotateX}deg)`;
  });

    card.addEventListener("mouseleave", () => {
      card.style.transform = "";
    });

    characters.forEach((character) => {
      const imgElement = document.createElement("img");
      imgElement.src = `/images/${character.image}`;
      imgElement.alt = character.name;
      imgElement.dataset.title = character.title;
      imgElement.dataset.desc = character.description; // Updated to use character.description
      imgElement.dataset.url = character.image; // Updated to use character.image
      imgElement.title = character.title;
      imgElement.addEventListener("click", () => setCharacter(character));
      imageList.appendChild(imgElement);
    });

    speakToggle.addEventListener("change", (e) => {
      if (e.target.checked && speechSynthesis.speaking) {
        speechSynthesis.cancel();
      }
    });

    sendBtn.addEventListener("click", send);

    chatWindow.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        send();
      }
    });

    function send() {
      const message = chatWindow.value;
      responseWindow.value = `You: ${message}`;
      fetch('/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message })
      })
        .then(response => response.json())
        .then(data => {
          responseWindow.value += `\n${currentCharacter.title}: ${data.answer}`;
          console.log("speak enabled", speakToggle.checked);

          if (speakToggle.checked) {
            say(data.answer);
          }

        })
        .catch(error => {
          console.error('Error:', error.error);
        });
      chatWindow.value = '';
    }

    function say(text) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.voice = speechSynthesis.getVoices()[currentCharacter.voice || 0];
      utterance.rate = 1;
      utterance.pitch = 1;
      utterance.volume = 1;
      speechSynthesis.speak(utterance);
    }

    function setCharacter(character, isInitial = false) {
      if (!isInitial) {
        card.style.transition = "none"; // Disable transition for immediate effect
      }

      card.style.animation = "";
      backgroundImage.style.backgroundImage = `url("/images/tunel.gif")`;
      setTimeout(() => {
          card.style.backgroundImage = `url("/images/${character.image}")`; // Updated to use character.image
          cardTitle.textContent = character.title; // Updated to use character.title
          // cardDesc.textContent = character.description; // Updated to use character.description
          card.style.transition = "background-image 0.5s ease"; // Added transition for smooth effect
          card.style.animation = "animate-rotate 0.5s ease"; // Added animation for smooth effect

          updateUrlState(character);
        }, isInitial ? 0 : 1000);

        setTimeout(() => {
          backgroundImage.style.backgroundImage = `url("/images/${character.image}")`; // Set background for the main element
        }, isInitial ? 0 : 2000);

        try {
          backgroundAudio.src = `/audio/${character.name}.mp3`; // Updated to use character.name
          backgroundAudio.play();
        } catch (error) {
          console.error("Error playing audio:", error);
        }
    }

    function updateUrlState(character) {
      const newUrl = `?character=${character.name}`;
      window.history.pushState({ path: newUrl }, '', newUrl);
    }

    setCharacter(currentCharacter, true);
</script>
